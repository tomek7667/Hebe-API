# Guide (user-friendly):
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

# Specification (technical, formal):
# https://packaging.python.org/en/latest/specifications/pyproject-toml/


# Choosing a build backend:
# https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend
[build-system]
# A list of packages that are needed to build your package:
requires = ["setuptools"]  # REQUIRED if [build-system] table is used
# The name of the Python object that frontends will use to perform the build:
build-backend = "setuptools.build_meta"  # If not defined, then legacy behavior can happen.


[project]
name = "hebe-api"
version = "1.0.1"
description = "Unofficial library for programmatic access to your Hebe account and your orders"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE.txt"}
keywords = ["hebe", "hebe api", "hebe-api"]
authors = [
  {name = "tomek7667", email = "hebeapi@cyber-man.pl" }
]
maintainers = []
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 4 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development",

  # Pick your license as you wish
  "License :: OSI Approved :: MIT License",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "requires-python" key in this file.
  "Programming Language :: Python :: 3.12",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
  "beautifulsoup4",
  "requests"
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install hebe-api[dev]
#
# Optional dependencies the project provides. These are commonly 
# referred to as "extras". For a more extensive definition see:
# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras
[project.optional-dependencies]
dev = ["check-manifest"]
test = ["coverage"]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]
"Homepage" = "https://github.com/tomek7667/hebe-api"
"Bug Reports" = "https://github.com/tomek7667/hebe-api/issues"
# "Funding" = "TODO"
# "Say Thanks!" = "http://saythanks.io/ TODO"
"Source" = "https://github.com/tomek7667/hebe-api/"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
[project.scripts]
# sample = "sample:main"
# currently none

# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
[tool.setuptools]
# If there are data files included in your packages that need to be
# installed, specify them here.
# package-data = {"sample" = ["*.dat"]}

[tool.black] 
line-length = 79
